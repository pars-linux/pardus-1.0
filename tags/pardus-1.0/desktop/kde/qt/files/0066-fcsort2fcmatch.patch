qt-bugs@ issue : none yet
bugs.kde.org number : none
applied: no
author: Lubos Lunak <l.lunak@kde.org>

When finding a matching fontconfig font, try first FcFontMatch() before
the noticeably more expensive FcFontSort(). Usually the first hit is enough,
so there's no need to list all matching fonts.

--- src/kernel/qfontdatabase_x11.cpp.sav	2005-12-01 15:18:06.000000000 +0100
+++ src/kernel/qfontdatabase_x11.cpp	2005-12-01 18:17:33.000000000 +0100
@@ -1787,106 +1787,137 @@ static QFontEngine *loadFontConfigFont(c
         FcCharSetDestroy(cs);
     }
 
-    FcResult result;
-    FcFontSet *fs = FcFontSort(0, pattern, FcFalse, 0, &result);
-    FcPatternDestroy(pattern);
-    if (!fs)
-        return 0;
+    QFontEngine *fe = 0;
+
+    for( int jj = 0; jj < 2; ++jj ) {
+        bool use_fontsort = ( jj == 1 );
+    
+        FcResult result;
+        FcFontSet *fs;
+        FcPattern *fsp;
+        if( use_fontsort ) {
+            fs = FcFontSort(0, pattern, FcFalse, 0, &result);
+            if (!fs)
+                continue;
+        } else {
+            fsp = FcFontMatch(0, pattern, &result);
+            if (!fsp)
+                continue;
+        }
 
 #ifdef FONT_MATCH_DEBUG
-    printf("fontset contains:\n");
-    for (int i = 0; i < fs->nfont; ++i) {
-	FcPattern *test = fs->fonts[i];
-	FcChar8 *fam;
-	FcPatternGetString(test, FC_FAMILY, 0, &fam);
-	printf("    %s\n", fam);
-    }
+        if( use_fontsort ) {
+            printf("fontset contains:\n");
+            for (int i = 0; i < fs->nfont; ++i) {
+        	FcPattern *test = fs->fonts[i];
+        	FcChar8 *fam;
+        	FcPatternGetString(test, FC_FAMILY, 0, &fam);
+        	printf("    %s\n", fam);
+            }
+        } else {
+            printf("fontmatch:");
+    	    FcChar8 *fam;
+            FcPatternGetString(fsp, FC_FAMILY, 0, &fam);
+            printf("    %s\n", fam);
+        }
 #endif
 
-    int ch = sampleCharacter(script).unicode();
-    double size_value = request.pixelSize;
-    if ( size_value > MAXFONTSIZE_XFT )
-	size_value = MAXFONTSIZE_XFT;
-
-    QFontEngine *fe = 0;
+        int ch = sampleCharacter(script).unicode();
+        double size_value = request.pixelSize;
+        if ( size_value > MAXFONTSIZE_XFT )
+    	    size_value = MAXFONTSIZE_XFT;
 
-    for (int i = 0; i < fs->nfont; ++i) {
-	FcPattern *font = fs->fonts[i];
-	FcCharSet *cs;
-	FcResult res = FcPatternGetCharSet(font, FC_CHARSET, 0, &cs);
-	if (res != FcResultMatch)
-	    continue;
-	if (!FcCharSetHasChar(cs, ch))
-	    continue;
-	FcBool scalable;
-	res = FcPatternGetBool(font, FC_SCALABLE, 0, &scalable);
-	if (res != FcResultMatch || !scalable) {
-	    int pixelSize;
-	    res = FcPatternGetInteger(font, FC_PIXEL_SIZE, 0, &pixelSize);
-	    if (res != FcResultMatch || QABS((size_value-pixelSize)/size_value) > 0.2)
-		continue;
-	}
+        int cnt = use_fontsort ? fs->nfont : 1;
+        
+        for (int i = 0; i < cnt; ++i) {
+    	    FcPattern *font = use_fontsort ? fs->fonts[i] : fsp;
+	    FcCharSet *cs;
+	    FcResult res = FcPatternGetCharSet(font, FC_CHARSET, 0, &cs);
+	    if (res != FcResultMatch)
+	        continue;
+	    if (!FcCharSetHasChar(cs, ch))
+	        continue;
+	    FcBool scalable;
+	    res = FcPatternGetBool(font, FC_SCALABLE, 0, &scalable);
+	    if (res != FcResultMatch || !scalable) {
+	        int pixelSize;
+	        res = FcPatternGetInteger(font, FC_PIXEL_SIZE, 0, &pixelSize);
+	        if (res != FcResultMatch || QABS((size_value-pixelSize)/size_value) > 0.2)
+		    continue;
+	    }
 
-	XftPattern *pattern = XftPatternDuplicate(font);
-	// add properties back in as the font selected from the list doesn't contain them.
-	addPatternProps(pattern, key, FALSE, TRUE, fp, request);
+	    XftPattern *pattern = XftPatternDuplicate(font);
+	    // add properties back in as the font selected from the list doesn't contain them.
+	    addPatternProps(pattern, key, FALSE, TRUE, fp, request);
 
-	XftPattern *result =
-	    XftFontMatch( QPaintDevice::x11AppDisplay(), fp->screen, pattern, &res );
-	XftPatternDestroy(pattern);
+	    XftPattern *result =
+	        XftFontMatch( QPaintDevice::x11AppDisplay(), fp->screen, pattern, &res );
+	    XftPatternDestroy(pattern);
 
-	// We pass a duplicate to XftFontOpenPattern because either xft font
-	// will own the pattern after the call or the pattern will be
-	// destroyed.
-	XftPattern *dup = XftPatternDuplicate( result );
-	XftFont *xftfs = XftFontOpenPattern( QPaintDevice::x11AppDisplay(), dup );
+	    // We pass a duplicate to XftFontOpenPattern because either xft font
+	    // will own the pattern after the call or the pattern will be
+	    // destroyed.
+	    XftPattern *dup = XftPatternDuplicate( result );
+	    XftFont *xftfs = XftFontOpenPattern( QPaintDevice::x11AppDisplay(), dup );
 
-	if ( !xftfs ) {
-	    // Xft couldn't find a font?
-	    qDebug("couldn't open fontconfigs chosen font with Xft!!!");
-	} else {
-	    fe = new QFontEngineXft( xftfs, result, 0 );
-	    if (fp->paintdevice
-		&& QPaintDeviceMetrics(fp->paintdevice).logicalDpiY() != QPaintDevice::x11AppDpiY()) {
-		double px;
-		XftPatternGetDouble(result, XFT_PIXEL_SIZE, 0, &px);
-		scale = request.pixelSize/px;
-	    }
-	    fe->setScale( scale );
-	    fe->fontDef = request;
-	    if ( script != QFont::Unicode && !canRender(fe, script) ) {
-		FM_DEBUG( "  WARN: font loaded cannot render sample 0x%04x", ch );
-		delete fe;
-		fe = 0;
+	    if ( !xftfs ) {
+	        // Xft couldn't find a font?
+	        qDebug("couldn't open fontconfigs chosen font with Xft!!!");
+	    } else {
+	        fe = new QFontEngineXft( xftfs, result, 0 );
+    	        if (fp->paintdevice
+		    && QPaintDeviceMetrics(fp->paintdevice).logicalDpiY() != QPaintDevice::x11AppDpiY()) {
+		    double px;
+		    XftPatternGetDouble(result, XFT_PIXEL_SIZE, 0, &px);
+		    scale = request.pixelSize/px;
+	        }
+	        fe->setScale( scale );
+	        fe->fontDef = request;
+	        if ( script != QFont::Unicode && !canRender(fe, script) ) {
+		    FM_DEBUG( "  WARN: font loaded cannot render sample 0x%04x", ch );
+		    delete fe;
+		    fe = 0;
+	        }
 	    }
-	}
-	if (fe) {
-            QFontEngineXft *xft = (QFontEngineXft *)fe;
-            char *family;
-            if (XftPatternGetString(xft->pattern(), XFT_FAMILY, 0, &family) == XftResultMatch)
-                xft->fontDef.family = QString::fromUtf8(family);
+	    if (fe) {
+                QFontEngineXft *xft = (QFontEngineXft *)fe;
+                char *family;
+                if (XftPatternGetString(xft->pattern(), XFT_FAMILY, 0, &family) == XftResultMatch)
+                    xft->fontDef.family = QString::fromUtf8(family);
 
-            double px;
-            if (XftPatternGetDouble(xft->pattern(), XFT_PIXEL_SIZE, 0, &px) == XftResultMatch)
-                xft->fontDef.pixelSize = qRound(px);
+                double px;
+                if (XftPatternGetDouble(xft->pattern(), XFT_PIXEL_SIZE, 0, &px) == XftResultMatch)
+                    xft->fontDef.pixelSize = qRound(px);
 
-            int weight = XFT_WEIGHT_MEDIUM;
-            XftPatternGetInteger(xft->pattern(), XFT_WEIGHT, 0, &weight);
-            xft->fontDef.weight = getXftWeight(weight);
+                int weight = XFT_WEIGHT_MEDIUM;
+                XftPatternGetInteger(xft->pattern(), XFT_WEIGHT, 0, &weight);
+                xft->fontDef.weight = getXftWeight(weight);
 
-            int slant = XFT_SLANT_ROMAN;
-            XftPatternGetInteger(xft->pattern(), XFT_SLANT, 0, &slant);
-            xft->fontDef.italic = (slant != XFT_SLANT_ROMAN);
+                int slant = XFT_SLANT_ROMAN;
+                XftPatternGetInteger(xft->pattern(), XFT_SLANT, 0, &slant);
+                xft->fontDef.italic = (slant != XFT_SLANT_ROMAN);
 
-            int spacing = XFT_PROPORTIONAL;
-            XftPatternGetInteger(xft->pattern(), XFT_SPACING, 0, &spacing);
-	    xft->fontDef.fixedPitch = spacing != XFT_PROPORTIONAL;
+                int spacing = XFT_PROPORTIONAL;
+                XftPatternGetInteger(xft->pattern(), XFT_SPACING, 0, &spacing);
+	        xft->fontDef.fixedPitch = spacing != XFT_PROPORTIONAL;
 
-            xft->fontDef.ignorePitch = FALSE;
-	    break;
+                xft->fontDef.ignorePitch = FALSE;
+	        break;
+            }
         }
-    }
-    FcFontSetDestroy(fs);
+        
+        if( use_fontsort )
+            FcFontSetDestroy(fs);
+        else
+            FcPatternDestroy(fsp);
+
+        if( fe )
+            break;
+
+    } // for( jj )
+
+    FcPatternDestroy(pattern);
+
     return fe;
 }
 
