o The only option we care about is "nullok", so rename the variable.  Don't
  pass NULL to the various crypt() variations, either.

--- Linux-PAM-0.77/modules/pam_unix/unix_chkpwd.c	2003-06-30 21:46:34.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_unix/unix_chkpwd.c	2003-06-30 21:49:32.000000000 -0400
@@ -102,7 +102,7 @@
 	}
 }
 
-static int _unix_verify_password(const char *name, const char *p, int opt)
+static int _unix_verify_password(const char *name, const char *p, int nullok)
 {
 	struct passwd *pwd = NULL;
 	struct spwd *spwdent = NULL;
@@ -154,6 +154,9 @@
 	if (salt_len == 0) {
-		return (opt == 0) ? UNIX_FAILED : UNIX_PASSED;
+		return (nullok == 0) ? UNIX_FAILED : UNIX_PASSED;
 	}
+	if (p == NULL) {
+		return UNIX_FAILED;
+	}
 
 	/* the moment of truth -- do we agree with the password? */
 	retval = UNIX_FAILED;
@@ -218,7 +221,7 @@
 {
 	char pass[MAXPASS + 1];
 	char option[8];
-	int npass, opt;
+	int npass, nullok;
 	int force_failure = 0;
 	int retval = UNIX_FAILED;
 	char *user;
@@ -271,9 +274,9 @@
 	} else {
 		option[7] = '\0';
 		if (strncmp(option, "nullok", 8) == 0)
-			opt = 1;
+			nullok = 1;
 		else
-			opt = 0;
+			nullok = 0;
 	}
 
 	/* read the password from stdin (a pipe from the pam_unix module) */
@@ -292,13 +295,13 @@
 		if (npass == 0) {
 			/* the password is NULL */
 
-			retval = _unix_verify_password(user, NULL, opt);
+			retval = _unix_verify_password(user, NULL, nullok);
 
 		} else {
 			/* does pass agree with the official one? */
 
 			pass[npass] = '\0';	/* NUL terminate */
-			retval = _unix_verify_password(user, pass, opt);
+			retval = _unix_verify_password(user, pass, nullok);
 
 		}
 	}
